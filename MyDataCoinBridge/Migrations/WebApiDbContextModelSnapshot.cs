// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyDataCoinBridge.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyDataCoinBridge.Migrations
{
    [DbContext(typeof(WebApiDbContext))]
    partial class WebApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CountryDataProvider", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DataProvidersId")
                        .HasColumnType("uuid");

                    b.HasKey("CountriesId", "DataProvidersId");

                    b.HasIndex("DataProvidersId");

                    b.ToTable("CountryDataProvider");
                });

            modelBuilder.Entity("DataProviderRewardCategory", b =>
                {
                    b.Property<Guid>("DataProvidersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RewardCategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("DataProvidersId", "RewardCategoriesId");

                    b.HasIndex("RewardCategoriesId");

                    b.ToTable("DataProviderRewardCategory");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.DataProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProviders");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("SocialNetworkName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("en_image")
                        .HasColumnType("text");

                    b.Property<string>("en_message")
                        .HasColumnType("text");

                    b.Property<string>("en_title")
                        .HasColumnType("text");

                    b.Property<string>("ru_image")
                        .HasColumnType("text");

                    b.Property<string>("ru_message")
                        .HasColumnType("text");

                    b.Property<string>("ru_title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.RewardCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RewardCategories");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<DateTime>("TxDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("TxId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppleId")
                        .HasColumnType("text");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("CameFrom")
                        .HasColumnType("text");

                    b.Property<Guid?>("CountriesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultLanguage")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("FCMToken")
                        .HasColumnType("text");

                    b.Property<string>("FacebookId")
                        .HasColumnType("text");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("text");

                    b.Property<string>("RefCode")
                        .HasColumnType("text");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.UserRefreshTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("CountryDataProvider", b =>
                {
                    b.HasOne("MyDataCoinBridge.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDataCoinBridge.Entities.DataProvider", null)
                        .WithMany()
                        .HasForeignKey("DataProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataProviderRewardCategory", b =>
                {
                    b.HasOne("MyDataCoinBridge.Entities.DataProvider", null)
                        .WithMany()
                        .HasForeignKey("DataProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDataCoinBridge.Entities.RewardCategory", null)
                        .WithMany()
                        .HasForeignKey("RewardCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.Email", b =>
                {
                    b.HasOne("MyDataCoinBridge.Entities.User", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.Notification", b =>
                {
                    b.HasOne("MyDataCoinBridge.Entities.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.User", b =>
                {
                    b.HasOne("MyDataCoinBridge.Entities.Country", "Countries")
                        .WithMany()
                        .HasForeignKey("CountriesId");

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("MyDataCoinBridge.Entities.User", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
